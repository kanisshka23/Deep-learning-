pip install easyocr transformers torch



import easyocr

def extract_text_from_image(image_path):
    reader = easyocr.Reader(['en'])
    result = reader.readtext(image_path)
    
    # Combine the extracted text
    extracted_text = " ".join([res[1] for res in result])
    return extracted_text




from transformers import AutoModelForTokenClassification, AutoTokenizer

def load_biobert():
    model_name = "dmis-lab/biobert-v1.1"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForTokenClassification.from_pretrained(model_name)
    return model, tokenizer



import torch

def classify_medical_terms(text, model, tokenizer):
    # Tokenize the input text
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True)

    # Get predictions
    with torch.no_grad():
        outputs = model(**inputs)

    # Get predicted class IDs
    logits = outputs.logits
    predictions = torch.argmax(logits, dim=2)

    # Convert IDs to tokens and predicted labels
    tokens = tokenizer.convert_ids_to_tokens(inputs['input_ids'][0])
    predicted_labels = [model.config.id2label[pred.item()] for pred in predictions[0]]

    # Filter for medical terms
    medical_terms = [(token, label) for token, label in zip(tokens, predicted_labels) if label != "O"]
    
    return medical_terms




def main(image_path):
    # Step 1: Extract text from the image
    extracted_text = extract_text_from_image(image_path)
    print(f"Extracted Text: {extracted_text}")

    # Step 2: Load BioBERT
    model, tokenizer = load_biobert()

    # Step 3: Classify medical terms
    medical_terms = classify_medical_terms(extracted_text, model, tokenizer)

    # Step 4: Display results
    for term, label in medical_terms:
        print(f"Term: {term}, Label: {label}")

if __name__ == "__main__":
    image_path = "path_to_your_image.jpg"  # Replace with your image path
    main(image_path)
